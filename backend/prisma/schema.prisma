// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int              @id @default(autoincrement())
  email        String           @unique
  passwordHash String           @map("password_hash")
  username     String           @unique
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  
  // Relations
  quizzes         Quiz[]
  submissions     QuizSubmission[]
  
  @@map("users")
}

model Quiz {
  id            Int      @id @default(autoincrement())
  topic         String
  model         String   @default("gpt-3.5-turbo")
  userId        Int?     @map("user_id")
  createdAt     DateTime @default(now()) @map("created_at")
  expiresAt     DateTime @map("expires_at")
  isAiGenerated Boolean  @default(false) @map("is_ai_generated")
  cacheKey      String?  @map("cache_key")
  
  // Relations
  user        User?            @relation(fields: [userId], references: [id])
  questions   Question[]
  submissions QuizSubmission[]
  
  @@map("quizzes")
}

model Question {
  id            Int      @id @default(autoincrement())
  quizId        Int      @map("quiz_id")
  questionText  String   @map("question_text")
  options       Json     // Store as JSON: { A: string, B: string, C: string, D: string }
  correctAnswer String   @map("correct_answer")
  explanation   String?
  questionOrder Int      @map("question_order")
  
  // Relations
  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[]
  
  @@map("questions")
}

model QuizSubmission {
  id             Int      @id @default(autoincrement())
  quizId         Int      @map("quiz_id")
  userId         Int      @map("user_id")
  submittedAt    DateTime @default(now()) @map("submitted_at")
  score          Int
  totalQuestions Int      @map("total_questions")
  percentage     Decimal  @db.Decimal(5, 2)
  
  // Relations
  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id])
  userAnswers UserAnswer[]
  
  @@map("quiz_submissions")
}

model UserAnswer {
  id           Int      @id @default(autoincrement())
  submissionId Int      @map("submission_id")
  questionId   Int      @map("question_id")
  userAnswer   String
  isCorrect    Boolean  @map("is_correct")
  submittedAt  DateTime @default(now()) @map("submitted_at")
  
  // Relations
  submission QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question   Question        @relation(fields: [questionId], references: [id])
  
  @@map("user_answers")
}
